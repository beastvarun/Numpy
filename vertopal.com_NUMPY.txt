

NumPy- Numerical python

Advantages of NumPy Arrays: 1.Allows several Mathematical operations
2.Faster operations
#CODE1
    import numpy as np
    x=np.array([1,2,3,4])
    print(x)
#output:
    [1 2 3 4]
#CODE2
    l = []
    for i in range(1,5):
           int_1 = int(input("enter:"))
           l.append(int_1)
    print(np.array(l))
#output:
    enter:12
    enter:13
    enter:14
    enter:15
    [12 13 14 15]
#CODE3
    ar2 = np.array([[1,2,3,4],[1,2,3,4]])
    print(ar2)
    print(ar2.ndim)
#output:
    [[1 2 3 4]
     [1 2 3 4]]
    2
#CODE4
    ar2 = np.array([[[1,2,3,4],[1,2,3,4],[1,2,3,4]]])
    print(ar2)
    print(ar2.ndim)
output:
    [[[1 2 3 4]
      [1 2 3 4]
      [1 2 3 4]]]
    3
#CODE5
    arn = np.array([1,2,3,4],ndmin=10 )
    print(arn)
    print(arn.ndim)
output:
    [[[[[[[[[[1 2 3 4]]]]]]]]]]
    10
#CODE6
    ar_em = np.empty(4)
    print(ar_em)
output:
    [1.27012815e-316 0.00000000e+000 6.91650048e-310 6.91650582e-310]
#CODE7
    var=np.random.rand(4)
    print(var)
output:
    [0.59463849 0.22016296 0.27860442 0.1539618 ]
#CODE8
    var = np.random.randn(5)
    print(var)

    [ 0.21863952 -1.27179944 -0.25978218  1.28683161  0.47492132]
#CODE9
    var=np.random.ranf(4)
    print(var)
output:
    [0.42991409 0.74436854 0.0357641  0.16204299]
#CODE10
    var=np.random.randint(5,20,5)
    print(var)
output:
    [ 6 19 12 14 17]
#CODE11
    var=np.array([[1,2,3,4],[1,2,3,4]])
    print(var)
    print(var.shape)
output:
    [[1 2 3 4]
     [1 2 3 4]]
    (2, 4)
#CODE12
      var=np.array([[1,2,3,4],[1,2,3,4]])
    print(var)
    print()
    x=var.reshape(4,2)
    print(x)
output:
    [[1 2 3 4]
     [1 2 3 4]]

    [[1 2]
     [3 4]
     [1 2]
     [3 4]]
#CODE13
    var=np.array([1,2,34,5,3,22])
    print("min",np.min(var),np.argmin(var))
    print("max",np.max(var),np.argmax(var))
output:
    min 1 0
    max 34 2
#CODE14
    var1=np.array([[2,1,3],[9,5,6]])
    print(np.min(var1,axis=0))
    print(np.min(var1,axis=1))
output:
    [2 1 3]
    [1 5]
#CODE15
    var2=np.array([1,2,3,4])
    print(np.cumsum(var2))

    [ 1  3  6 10]
#CODE16
    var1=np.array([[1,2,3,4,5],[9,8,7,6,5],[11,12,13,14,15]])
    print(var1)
    print()
    print("8 to 5",var1[1,1:])
output:
    [[ 1  2  3  4  5]
     [ 9  8  7  6  5]
     [11 12 13 14 15]]

    8 to 5 [8 7 6 5]
#CODE17
    var =np.array([4,2,3,4,2,5,2,5,6,7])
    x=np.where(var==2)
    print(x)
output:
    (array([1, 4, 6]),)
#CODE18
    var=np.array([1,2,3,4,9,10])
    x=np.searchsorted(var,[5,6])
    print(x)

    [4 4]
#CODE19
    var=np.array([4,2,3,1,12,5,22,52,6,7])
    print(np.sort(var))
output:
    [ 1  2  3  4  5  6  7 12 22 52]
#CODE20
    var=np.array(["a","s","d","f"])
    f=[True,False,False,True]
    new_a=var[f]
    print(new_a)
output:
    ['a' 'f']
#CODE21
    var=np.array([1,2,3,4,5])
    np.random.shuffle(var)
    print(var)
output:
    [5 4 2 1 3]
#COD22
    var=np.array([1,2,3,4,2,5,2,6,2,7])
    x=np.unique(var,return_index=True,return_counts=True)
    print(x)
output:
    (array([1, 2, 3, 4, 5, 6, 7]), array([0, 1, 2, 3, 5, 7, 9]), array([1, 4, 1, 1, 1, 1, 1]))
#CODE23
    var=np.array([1,2,3,4,5,6])
    y=np.resize(var,(2,3))
    print(y)
output:
    [[1 2 3]
     [4 5 6]]
#CODE24
    var=np.array([1,2,3,4])
    print(var)
    v=np.insert(var,2,40)
    print(v)
output:
    [1 2 3 4]
    [ 1  2 40  3  4]
#CODE25
    var=np.array([[1,2,3],[1,2,3]])
    print(var)
    print()
    v=np.insert(var,2,[22,23,24],axis=0)
    print(v)
output:
    [[1 2 3]
     [1 2 3]]

    [[ 1  2  3]
     [ 1  2  3]
     [22 23 24]]
#CODE26
    var=np.array([1,2,3,4])
    print(var)
    d=np.delete(var,2)
    print(d)
output:
    [1 2 3 4]
    [1 2 4]
#CODE27
    var=np.matrix([[1,2,3],[1,2,3]])
    print(var)
    print(type(var))
    print()
    var1=np.array([[1,2,3],[1,2,3]])
    print(var1)
    print(type(var1))
output:
    [[1 2 3]
     [1 2 3]]
    <class 'numpy.matrix'>

    [[1 2 3]
     [1 2 3]]
    <class 'numpy.ndarray'>
#CODE28
    var1=np.array([[[1,2,3],[1,2,3],[1,2,3]]])
    var2=np.array([[[1,2,3],[1,2,3],[1,2,3]]])
    print(var1)
    print(var2)

    print()
    d=np.multiply(var1,var2)
    print(d)
output:
    [[[1 2 3]
      [1 2 3]
      [1 2 3]]]
    [[[1 2 3]
      [1 2 3]
      [1 2 3]]]

    [[[1 4 9]
      [1 4 9]
      [1 4 9]]]
#CODE29
    var=np.matrix([[1,2],[1,2]])
    var2=np.matrix([[1,2],[1,2]])
    print(var1)
    print(var2)

    print()
    d=var*var2
    print(d)
output:
    [[[1 2 3]
      [1 2 3]
      [1 2 3]]]
    [[1 2]
     [1 2]]

    [[3 6]
     [3 6]]
#CODE30
    var=np.matrix([[1,2,3],[4,5,6]])
    print(var)
    print()
    print(np.transpose(var))
    print()
    print(var.T)
    print(np.swapaxes(var,0,1))
output:
    [[1 2 3]
     [4 5 6]]

    [[1 4]
     [2 5]
     [3 6]]

    [[1 4]
     [2 5]
     [3 6]]
    [[1 4]
     [2 5]
     [3 6]]
#CODE31
    var=np.matrix([[1,2],[3,4]])
    print()
    print(np.linalg.inv(var))
output:

    [[-2.   1. ]
     [ 1.5 -0.5]]
#CODE32
    var=np.matrix([[1,2],[3,4]])
    print(var)
    print(np.linalg.matrix_power(var,4))
output:
    [[1 2]
     [3 4]]
    [[199 290]
     [435 634]]
#CODE33
    var=np.matrix([[1,2],[3,4]])
    print(var)
    print()
    print(np.linalg.det(var))
output:
    [[1 2]
     [3 4]]

    -2.0000000000000004
